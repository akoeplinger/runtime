name: Backport PR to branch
on:
  issue_comment:
    types: [created]

jobs:
  backport:
    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/backport to')
    runs-on: ubuntu-20.04
    steps:
    - name: Get target branch
      id: targetbranch
      env:
        BACKPORT_TRIGGER_BODY: ${{ github.event.comment.body }}
      run: |
        # extract the target branch name containing these characters: a-z, A-Z, digits, forward slash, dot, hyphen, underscore
        BRANCHNAME=$(echo '{}' | jq --raw-output 'env.BACKPORT_TRIGGER_BODY | match("\\/backport to ([a-zA-Z\\d\\/\\.\\-\\_]+)").captures[0].string')
        echo "Backport target branch: $BRANCHNAME"
        echo "::set-output name=branchname::$BRANCHNAME"
    - name: Post comment to PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        hub api repos/$GITHUB_REPOSITORY/issues/${{ github.event.issue.number }}/comments -f body="Started backport to ${{ steps.targetbranch.outputs.branchname }}: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
    - name: Checkout repo in target branch
      uses: actions/checkout@v2
      with:
         ref: ${{ steps.targetbranch.outputs.branchname }}
    - name: Apply backport patch and push
      id: pushbackport
      run: |
        # Download backport patch
        curl -sSL "${{ github.event.issue.pull_request.patch_url }}" --output changes.patch

        # configure git
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

        # create temporary backport branch
        temp_branch="backport/pr-${{ github.event.issue.number }}-to-${{ steps.targetbranch.outputs.branchname }}"
        git checkout -b $temp_branch
        echo "::set-output name=branch_exists_remote_status::$(git ls-remote --exit-code --heads origin $temp_branch > /dev/null)$?"

        # apply the patch
        git_am_failed=0
        git am changes.patch --3way --ignore-whitespace --keep-non-patch > git_am_output.txt 2>&1 || git_am_failed=1
        cat git_am_output.txt
        echo "::set-output name=git_am_failed::$git_am_failed"
        if [ $git_am_failed != 0 ]; then
          echo "::error::git am failed, most likely due to a merge conflict."
          exit 1
        done

        # push to origin
        git push --force --set-upstream origin HEAD:$temp_branch
    - name: Open pull request
      # skip opening PR if the branch already exists since that means it was opened
      # by an earlier backport and force pushing to the branch updates the existing PR
      if: steps.pushbackport.outputs.branch_exists_remote_status != 0 && steps.pushbackport.outputs.git_am_failed != 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # create PR title and description
        pr_body="[${{ steps.targetbranch.outputs.branchname }}] ${{ github.event.issue.title }}

        Backport of #${{ github.event.issue.number }}.

        /cc @${{ github.event.comment.user.login }}"

        # append PR author if different from user who issued the backport command
        if [[ "${{ github.event.comment.user.login }}" != "${{ github.event.issue.user.login }}" ]]; then
          cc_users="$cc_users @${{ github.event.issue.user.login }}"
        fi

        # open the PR
        hub pull-request --base ${{ steps.targetbranch.outputs.branchname }} --message "$pr_body"
    - name: Post comment on git am error
      if: ${{ failure() && steps.pushbackport.outputs.git_am_failed == 1 }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        comment_body="${{ github.event.comment.user.login }} Backporting to ${{ steps.targetbranch.outputs.branchname }} failed, the patch results in conflicts:

        ```
        $(cat git_am_output.txt)
        ```

        Please backport manually!"

        hub api repos/$GITHUB_REPOSITORY/issues/${{ github.event.issue.number }}/comments -f body="$comment_body"
    - name: Post comment on general error
      if: ${{ failure() && steps.pushbackport.outputs.git_am_failed != 1 }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        hub api repos/$GITHUB_REPOSITORY/issues/${{ github.event.issue.number }}/comments -f body="@${{ github.event.comment.user.login }} An error occurred while backporting to ${{ steps.targetbranch.outputs.branchname }}, please backport manually!"
